// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	todo "todoapp/internal/database/model/todo"

	mock "github.com/stretchr/testify/mock"
)

// TodoService is an autogenerated mock type for the TodoService type
type TodoService struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: t
func (_m *TodoService) AddTask(t todo.Task) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for AddTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(todo.Task) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTask provides a mock function with given fields: id, userId
func (_m *TodoService) DeleteTask(id int, userId int) error {
	ret := _m.Called(id, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTaskById provides a mock function with given fields: id, userId
func (_m *TodoService) GetTaskById(id int, userId int) (todo.Task, error) {
	ret := _m.Called(id, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskById")
	}

	var r0 todo.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (todo.Task, error)); ok {
		return rf(id, userId)
	}
	if rf, ok := ret.Get(0).(func(int, int) todo.Task); ok {
		r0 = rf(id, userId)
	} else {
		r0 = ret.Get(0).(todo.Task)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodoList provides a mock function with given fields: id, criteria
func (_m *TodoService) GetTodoList(id int, criteria todo.TodoSearchCriteria) (todo.Todos, error) {
	ret := _m.Called(id, criteria)

	if len(ret) == 0 {
		panic("no return value specified for GetTodoList")
	}

	var r0 todo.Todos
	var r1 error
	if rf, ok := ret.Get(0).(func(int, todo.TodoSearchCriteria) (todo.Todos, error)); ok {
		return rf(id, criteria)
	}
	if rf, ok := ret.Get(0).(func(int, todo.TodoSearchCriteria) todo.Todos); ok {
		r0 = rf(id, criteria)
	} else {
		r0 = ret.Get(0).(todo.Todos)
	}

	if rf, ok := ret.Get(1).(func(int, todo.TodoSearchCriteria) error); ok {
		r1 = rf(id, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: t, userId
func (_m *TodoService) UpdateTask(t todo.Task, userId int) error {
	ret := _m.Called(t, userId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(todo.Task, int) error); ok {
		r0 = rf(t, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTodoService creates a new instance of TodoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoService {
	mock := &TodoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
