// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	todo "todoapp/internal/database/model/todo"

	mock "github.com/stretchr/testify/mock"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: t
func (_m *TodoRepository) CreateTask(t todo.Task) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(todo.Task) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTask provides a mock function with given fields: id
func (_m *TodoRepository) DeleteTask(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTaskById provides a mock function with given fields: id
func (_m *TodoRepository) GetTaskById(id int) (todo.Task, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskById")
	}

	var r0 todo.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (todo.Task, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) todo.Task); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(todo.Task)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodoListByUserId provides a mock function with given fields: id
func (_m *TodoRepository) GetTodoListByUserId(id int) (todo.Todos, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTodoListByUserId")
	}

	var r0 todo.Todos
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (todo.Todos, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) todo.Todos); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(todo.Todos)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: t
func (_m *TodoRepository) UpdateTask(t todo.Task) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(todo.Task) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTodoRepository creates a new instance of TodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoRepository {
	mock := &TodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
